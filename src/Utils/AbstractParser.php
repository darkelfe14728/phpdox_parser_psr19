<?php

namespace phpDoxExtension\Parser\PSR19\Utils;

use TheSeer\phpDox\DocBlock\GenericParser;

/**
 * The abstract parser used by all tags
 *
 * @package phpDoxExtension\Parser\PSR19\Utils
 */
abstract class AbstractParser extends GenericParser {
    /**
     * Is the tag allowed as inline tag "{@xxx}" ?
     *
     * @return bool True if allowed as inline tag
     */
    abstract public function allowedAsInline (): bool;

    /**
     * Parse the tag and return a corresponding element
     *
     * @return GenericElement The element generated by the parse
     */
    abstract protected function parse (): GenericElement;
    /**
     * Convenient function to create a new element
     *
     * @param string $class          The element type (Fully Qualified Class Name)
     * @param bool   $allowInlineTag True if children must be scanned for "inline tags"
     *
     * @return GenericElement The new element
     */
    protected function createElement (string $class, bool $allowInlineTag = false): GenericElement {
        return new $class($this->factory, $this->name, $allowInlineTag);
    }

    /**
     * The tag payload
     *
     * @return string The payload
     */
    protected function getPayload (): string {
        return $this->payload;
    }
    /**
     * The tag payload, splitted
     *
     * @param bool $keepEmpty Keep empty parts ?
     *
     * @return string[] List of payload parts
     */
    protected function getPayloadSplitted (bool $keepEmpty = false): array {
        return preg_split('@\s' . ($keepEmpty ? '' : '+') . '@', $this->getPayload());
    }

    /**
     * @inheritDoc
     */
    public function getObject (array $buffer): GenericElement {
        if (count($buffer)) {
            if (!empty($this->payload)) {
                $this->payload .= ' ';
            }
            $this->payload .= trim(implode("\n", array_map('trim', $buffer)));
        }

        return $this->parse();
    }

    /**
     * @inheritDoc
     */
    protected function lookupType ($types_raw): string {
        $types = explode('|', $types_raw);
        foreach ($types as &$type) {
            $type = parent::lookupType($type);
        }
        return implode('|', $types);
    }
}